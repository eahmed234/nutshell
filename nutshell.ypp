%code requires {
    #include <iostream>
    #include "nutshell.hpp"
    using namespace std;

    int yylex(); 
}

%code {
    void yyerror(const char* description) { 
    	cout << description << endl; 
    }
}

%define parse.error verbose

%union {
    int val; 
    char sym;
};

%token <val> NUM
%token <sym> OPA OPM 
%token LP RP STOP 

%type <val> exp term sfactor factor

%%

program: stmt { YYACCEPT; }
|       { keepgoing = false; }

stmt: exp STOP { cout << $1 << endl; }

exp: exp OPA term      { $$ = ($2 == '+' ? $1 + $3 : $1 - $3); }
| term                 { $$ = $1; }

term: term OPM sfactor { $$ = ($2 == '*' ? $1 * $3 : $1 / $3); }
| sfactor              { $$ = $1; }

sfactor: OPA factor    { $$ = ($1 == '+' ? $2 : -$2); }
| factor               { $$ = $1; }

factor: NUM            { $$ = $1; }
| LP exp RP            { $$ = $2; }

%%