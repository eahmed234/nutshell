%code requires {
    #include <iostream>
    #include <cstdlib>
    #include "nutshell.hpp"
    using namespace std;

    int yylex(); 
}

%code {
    void yyerror(const char* description) { 
    	cerr << description << endl; 
    }
}

%define parse.error verbose

%union {
    char* str;
};

%token <str> WORD
%token STOP EXIT

%%

program: line       { YYACCEPT; }
| EXIT              { cout << "Goodbye!\n"; exit(0); }

line: fullcmd STOP      { parseLine(); }
| fullcmd redirect STOP { parseLine(); }

fullcmd: cmd      
| fullcmd '|' cmd

cmd: exe
| exe args

exe: WORD       { line.addCommand(expandVars($1)); free($1); }

args: WORD      { line.addArg(expandVars($1)); free($1); }
| args WORD     { line.addArg(expandVars($2)); free($2); }

redirect: '>' WORD      { line.outputRedirect = true; line.append = false; line.output = $2; free($2); }
| '<' WORD              { line.inputRedirect = true; line.input = $2; free($2); }
| '>''>' WORD           { line.outputRedirect = true; line.append = true; line.output = $3; free($3);}
| '<' WORD '>' WORD     { line.inputRedirect = true; line.input = $2; line.outputRedirect = true; line.append = false; line.output = $4; free($2); free($4); }
| '<' WORD '>''>' WORD  { line.inputRedirect = true; line.input = $2; line.outputRedirect = true; line.append = true; line.output = $5; free($2); free($5); }

%%