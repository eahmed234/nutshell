%code requires {
    #include <iostream>
    #include <cstdlib>
    #include "nutshell.hpp"
    using namespace std;

    int yylex(); 
}

%code {
    void yyerror(const char* description) { 
    	cerr << description << endl; 
    }
}

%define parse.error verbose

%union {
    char* str;
};

%token <str> WORD
%token STOP EXIT

%%

program: line       { YYACCEPT; }
| EXIT              { cout << "Goodbye!\n"; exit(0); }

line: fullcmd STOP      { parseCMD(); }
| fullcmd redirect STOP { parseCMD(); }

fullcmd: cmd           { }
| fullcmd '|' cmd      { }

cmd: exe        { }
| exe args      { }

exe: WORD       { currCommand.addCommand(expandVars($1)); free($1); }

args: WORD      { currCommand.addArg(expandVars($1)); free($1); }
| args WORD     { currCommand.addArg(expandVars($2)); free($2); }

redirect: '>' WORD  { cout << "redirect not implemented\n"; }
| '<' WORD          { cout << "redirect not implemented\n"; }

%%